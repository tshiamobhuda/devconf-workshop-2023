name: Python Packaging and Deployment

on:
  workflow_dispatch:
    inputs:
      lambda_function_name:
        required: true
        type: string
        default: "chatgpt-telegram"
  workflow_call:
    inputs:
      lambda_function_name:
        required: true
        type: string

env:
  py_version: '3.10'
  aws_region: af-south-1

jobs:
  packaging_and_deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clone Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py_version }}
          architecture: 'x64'

      - name: Package Python
        run: |
          # Create the packaging directory.
          dir_name=lambda_dist_pkg/
          mkdir $dir_name

          # Set up some variables and environment for the packaging.
          function_name="${{ inputs.lambda_function_name }}"

          python3 -m pip install --user virtualenv
          virtualenv env_$function_name
          source ./env_$function_name/bin/activate

          # Installing python dependencies.
          pip3 install -r ./lambda_function/requirements.txt

          # Deactivate virtual environment.
          deactivate

          # Create deployment package.
          echo "Creating deployment package."
          cp -r env_$function_name/lib/python${{ env.py_version }}/site-packages/* ./$dir_name
          cp -r ./lambda_function/* ./$dir_name
          cd ./$dir_name
          zip -r $function_name.zip .
          mv $function_name.zip ../
          cd ..
          # Removing virtual environment folder.
          echo "Removing virtual environment folder."
          rm -rf ./env_$function_name
          rm -rf ./$dir_name
          echo "Package Built."
        working-directory: ./aws-chatgpt-telegram/
        env:
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          TELEGRAM_SECRET_TOKEN: "${{ secrets.TELEGRAM_SECRET_TOKEN }}"

      - name: Python Deployment
        run: |
          function_name="${{ inputs.lambda_function_name }}"
          aws lambda update-function-code --function-name $function_name --zip-file fileb://$function_name.zip
          aws lambda update-function-configuration --function-name $function_name --environment Variables="{TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }},TELEGRAM_SECRET_TOKEN=${{ secrets.TELEGRAM_SECRET_TOKEN }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}}"
        working-directory: ./aws-chatgpt-telegram/